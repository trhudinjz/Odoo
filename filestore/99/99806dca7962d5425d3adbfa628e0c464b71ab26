
/* /point_of_sale/static/src/entry/chrome_adapter.js */
odoo.define('@point_of_sale/entry/chrome_adapter',async function(require){'use strict';let __exports={};const{useService}=require("@web/core/utils/hooks");const Chrome=require("point_of_sale.Chrome");const ProductScreen=require("point_of_sale.ProductScreen");const Registries=require("point_of_sale.Registries");const{PosGlobalState}=require("point_of_sale.models");const{configureGui}=require("point_of_sale.Gui");const{registry}=require("@web/core/registry");const env=require("point_of_sale.env");const{debounce}=require("@web/core/utils/timing");const{batched}=require("point_of_sale.utils");const{Component,reactive,markRaw,useExternalListener,useSubEnv,onWillUnmount,xml}=owl;const ChromeAdapter=__exports.ChromeAdapter=class ChromeAdapter extends Component{setup(){this.PosChrome=Registries.Component.get(Chrome);ProductScreen.sortControlButtons();const legacyActionManager=useService("legacy_action_manager");const pos=PosGlobalState.create({env:markRaw(env)});this.batchedCustomerDisplayRender=batched(()=>{reactivePos.send_current_order_to_customer_facing_display();});const reactivePos=reactive(pos,this.batchedCustomerDisplayRender);env.pos=reactivePos;env.legacyActionManager=legacyActionManager;env.proxy.set_pos(reactivePos);window.posmodel=pos.debug?reactivePos:pos;this.env=env;this.__owl__.childEnv=env;useSubEnv({get isMobile(){return window.innerWidth<=768;},});let currentIsMobile=this.env.isMobile;const updateUI=debounce(()=>{if(this.env.isMobile!==currentIsMobile){currentIsMobile=this.env.isMobile;this.render(true);}},15);useExternalListener(window,"resize",updateUI);onWillUnmount(updateUI.cancel);}
async configureAndStart(chrome){registry.category('error_handlers').add('posErrorHandler',(env,...noEnvArgs)=>{if(chrome){return chrome.errorHandler(this.env,...noEnvArgs);}
return false;},{sequence:0});const BlockUiFromRegistry=registry.category("main_components").get("BlockUI");registry.category("main_components").remove("BlockUI");configureGui({component:chrome});await chrome.start();registry.category("main_components").add("BlockUI",BlockUiFromRegistry);this.batchedCustomerDisplayRender();}}
ChromeAdapter.template=xml`<t t-component="PosChrome" setupIsDone.bind="configureAndStart"/>`;return __exports;});;

/* /point_of_sale/static/src/entry/main.js */
odoo.define('@point_of_sale/entry/main',async function(require){'use strict';let __exports={};const{startWebClient}=require("@web/start");const{ChromeAdapter}=require("@point_of_sale/entry/chrome_adapter");const Registries=require("point_of_sale.Registries");const{registry}=require("@web/core/registry");const{Component,xml}=owl;class PosApp extends Component{setup(){this.Components=registry.category("main_components").getEntries();}}
PosApp.template=xml`
  <body>
    <ChromeAdapter />
    <div>
      <t t-foreach="Components" t-as="C" t-key="C[0]">
        <t t-component="C[1].Component" t-props="C[1].props"/>
      </t>
    </div>
  </body>
`;PosApp.components={ChromeAdapter};function startPosApp(){Registries.Component.freeze();Registries.Model.freeze();startWebClient(PosApp);}
startPosApp();return __exports;});;

/* /web/static/src/start.js */
odoo.define('@web/start',async function(require){'use strict';let __exports={};const{makeEnv,startServices}=require("@web/env");const{legacySetupProm}=require("@web/legacy/legacy_setup");const{mapLegacyEnvToWowlEnv}=require("@web/legacy/utils");const{localization}=require("@web/core/l10n/localization");const{session}=require("@web/session");const{renderToString}=require("@web/core/utils/render");const{setLoadXmlDefaultApp,templates}=require("@web/core/assets");const{hasTouch}=require("@web/core/browser/feature_detection");const{App,whenReady}=require("@odoo/owl");__exports.startWebClient=startWebClient;async function startWebClient(Webclient){odoo.info={db:session.db,server_version:session.server_version,server_version_info:session.server_version_info,isEnterprise:session.server_version_info.slice(-1)[0]==="e",};odoo.isReady=false;const env=makeEnv();await startServices(env);await whenReady();const legacyEnv=await legacySetupProm;mapLegacyEnvToWowlEnv(legacyEnv,env);const app=new App(Webclient,{env,templates,dev:env.debug,translatableAttributes:["data-tooltip"],translateFn:env._t,});renderToString.app=app;setLoadXmlDefaultApp(app);const root=await app.mount(document.body);const classList=document.body.classList;if(localization.direction==="rtl"){classList.add("o_rtl");}
if(env.services.user.userId===1){classList.add("o_is_superuser");}
if(env.debug){classList.add("o_debug");}
if(hasTouch()){classList.add("o_touch_device");}
odoo.__WOWL_DEBUG__={root};odoo.isReady=true;const favicon=`/web/image/res.company/${env.services.company.currentCompany.id}/favicon`;const icons=document.querySelectorAll("link[rel*='icon']");const msIcon=document.querySelector("meta[name='msapplication-TileImage']");for(const icon of icons){icon.href=favicon;}
if(msIcon){msIcon.content=favicon;}}
return __exports;});;

/* /web/static/src/legacy/legacy_setup.js */
odoo.define('@web/legacy/legacy_setup',async function(require){'use strict';let __exports={};const{registry}=require("@web/core/registry");const{makeLegacyNotificationService,makeLegacyRpcService,makeLegacySessionService,makeLegacyDialogMappingService,makeLegacyCrashManagerService,makeLegacyCommandService,makeLegacyDropdownService,}=require("@web/legacy/utils");const{makeLegacyActionManagerService}=require("@web/legacy/backend_utils");const AbstractService=require("web.AbstractService");const legacyEnv=require("web.env");const session=require("web.session");const makeLegacyWebClientService=require("web.pseudo_web_client");const{templates}=require("@web/core/assets");const{Component,whenReady}=require("@odoo/owl");let legacySetupResolver;const legacySetupProm=__exports.legacySetupProm=new Promise((resolve)=>{legacySetupResolver=resolve;});(async()=>{AbstractService.prototype.deployServices(legacyEnv);Component.env=legacyEnv;const legacyActionManagerService=makeLegacyActionManagerService(legacyEnv);const serviceRegistry=registry.category("services");serviceRegistry.add("legacy_action_manager",legacyActionManagerService);const legacyRpcService=makeLegacyRpcService(legacyEnv);serviceRegistry.add("legacy_rpc",legacyRpcService);const legacySessionService=makeLegacySessionService(legacyEnv,session);serviceRegistry.add("legacy_session",legacySessionService);const legacyWebClientService=makeLegacyWebClientService(legacyEnv);serviceRegistry.add("legacy_web_client",legacyWebClientService);serviceRegistry.add("legacy_notification",makeLegacyNotificationService(legacyEnv));serviceRegistry.add("legacy_crash_manager",makeLegacyCrashManagerService(legacyEnv));const legacyDialogMappingService=makeLegacyDialogMappingService(legacyEnv);serviceRegistry.add("legacy_dialog_mapping",legacyDialogMappingService);const legacyCommandService=makeLegacyCommandService(legacyEnv);serviceRegistry.add("legacy_command",legacyCommandService);serviceRegistry.add("legacy_dropdown",makeLegacyDropdownService(legacyEnv));const wowlToLegacyServiceMappers=registry.category("wowlToLegacyServiceMappers").getEntries();for(const[legacyServiceName,wowlToLegacyServiceMapper]of wowlToLegacyServiceMappers){serviceRegistry.add(legacyServiceName,wowlToLegacyServiceMapper(legacyEnv));}
await Promise.all([whenReady(),session.is_bound]);legacyEnv.templates=templates;legacySetupResolver(legacyEnv);})();return __exports;});odoo.define(`web.legacySetup`,async function(require){return require('@web/legacy/legacy_setup')[Symbol.for("default")];});